apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'idea'

// The required Scala version
ext.scalaVersion = '2.9.2'

// Define equivalent Maven GAV coordinates.
// groupId - This element indicates the unique identifier of the organization or group that created the project.
// The groupId is one of the key identifiers of a project and is typically based on the
// fully qualified domain name of your organization
group = 'org.scalafx'
// artifactId - This element indicates the unique base name of the primary artifact being generated by this project.
// The primary artifact for a project is typically a JAR file.
// (In Gradle, the artifactId is normally taken from the containing directory name)
archivesBaseName = "scalafx_${scalaVersion}"
// version - This element indicates the version of the artifact generated by the project.
version = '1.0-SNAPSHOT'

// Recommendation from Gradle Maven Task chapter http://www.gradle.org/docs/current/userguide/maven_plugin.html
// in order to force the artifactId to be exactly as defined
// uploadTask.repositories.mavenDeployer.pom.artifactId="scalafx"
// archiveTask.archiveTask.baseName="scalafx"

ext.isSnapshot = version.endsWith("-SNAPSHOT")
if (isSnapshot) {
    // do snapshot stuff
    println("DEBUG: **** This is a Snapshot Build ****")
}


buildscript {
    final javafxHome = System.env['JAVAFX_HOME']
    if (javafxHome) {
        ext.javafxJar = "${javafxHome}/rt/lib/jfxrt.jar"
        if ( !new File( ext.javafxJar ).exists() ) {
            ext.javafxJar = "${javafxHome}/jre/lib/jfxrt.jar"
        }
    } else {
      final javaHome = System.env['JAVA_HOME']
      if (javaHome)
        ext.javafxJar = "${javaHome}/jre/lib/jfxrt.jar"
    }

    try {
      println "JavaFX runtime jar: ${ext.javafxJar}"
      dependencies {
        classpath files(ext.javafxJar)
      }
    } catch (MissingPropertyException mpe) {
      println """
                 |  Please set the environment variable JAVAFX_HOME
                 |  to the directory that contains rt/lib/jfxrt.jar
                 |  or e.g set JAVAFX_HOME to the /Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk/Contents/Home
                 |  otherwise the current JAVA_HOME will be used
                 |  with the JavaFX version ${scalafx_requiredJavaFxVersion}.\n""".stripMargin()
      System.exit 1
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'ScalaFX', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Libraries needed to run the scala tools
    scalaTools "org.scala-lang:scala-compiler:${scalaVersion}"
    scalaTools "org.scala-lang:scala-library:${scalaVersion}"

    // Libraries needed for scala api
    compile "org.scala-lang:scala-library:${scalaVersion}"
    
    // We need the JavaFX APIs    
    compile      files(ext.javafxJar)
    
    testCompile 'junit:junit:4.10'
    testCompile 'org.scalatest:scalatest_2.9.1:1.8'
}

sourceSets {
    main {
        scala {
            srcDir 'src'
        }
        scala {
            srcDir 'demo'
        }
    }
    test {
        scala {
            srcDir 'test'
        }    
    }
}

//apply {
//  from 'gradle/mavenCentralDeploy.gradle'
//}

task buildTimestamped(type: Copy, dependsOn: 'build') {
    from 'build/libs'
    into 'build/libs/timestamped'
    include '*.jar'
    rename { String fileName ->
        fileName.replace('SNAPSHOT', "SNAPSHOT-${new Date().format('HH-mm-dd-MM-yyyy')}")
    }
}

task wrapper(type: Wrapper, description:"create a gradlew") {
    gradleVersion = '1.2'
}

//signArchives.onlyIf {
//      project.hasProperty('signing.keyId')
//}

uploadArchives.onlyIf {
      project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
}

// task copyToLib(type: Copy) {
//    into "_lib"
//    from configurations.runtime
// }


task(debugGradle, dependon: 'classes', description:"debugs a gradle program") {
    println( "sourceSets.main.runtimeClasspath = "+sourceSets.main.runtimeClasspath )
    println( "sourceSets.test.runtimeClasspath = "+sourceSets.test.runtimeClasspath )
//    println( "sourceSets.test.runtimeClasspath.getAsPath() = "+sourceSets.test.runtimeClasspath.getAsPath()  )
    
    sourceSets.all {
        println name
    }
}

task(generateRunners, dependon: 'classes', description:"generates a UNIX bash script") {

    if (!System.properties['os.name'].toLowerCase().contains('windows')) {
        // Not Microsoft Windows
        new File("ColorfulCircles").withWriter { out ->
            out.println("#!/bin/bash")
            out.println("scala -cp ${sourceSets.main.runtimeClasspath.getAsPath()}  scalafx.ColorfulCircles")
            "chmod 755 scalafx.ColorfulCircles".execute()
        }
    }
}

task(run, dependsOn: 'classes', type: JavaExec, description:"runs the colorful circles demo program") {
    main = 'scalafx.ColorfulCircles'
    classpath = sourceSets.main.runtimeClasspath
    args 'one', 'two', 'three'
    systemProperty 'simple.message', 'Hello '
}

// fini
