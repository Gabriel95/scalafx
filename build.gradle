// ================================================================================
// Gradle build for the root `scalafx' project
// ================================================================================
// This is multi-project build, see the file `settings.gradle' for the definitions
// of the sub-projects.

// The required Scala version
ext {
    scalaVersion = '2.9.2'
    scalaGroup = 'org.scala-lang'
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    final javafxHome = System.env['JAVAFX_HOME']
    if (javafxHome) {
        ext.javafxJar = "${javafxHome}/rt/lib/jfxrt.jar"
        if ( !new File( ext.javafxJar ).exists() ) {
            ext.javafxJar = "${javafxHome}/jre/lib/jfxrt.jar"
        }
    } else {
        final javaHome = System.env['JAVA_HOME']
        if (javaHome)
            ext.javafxJar = "${javaHome}/jre/lib/jfxrt.jar"
    }

    try {
        println "${project.name} - DEBUG: JavaFX runtime jar: ${ext.javafxJar}"
        dependencies {
            runtime     files(ext.javafxJar)
        }
    } catch (MissingPropertyException mpe) {
        println """
                 |  Please set the environment variable JAVAFX_HOME
                 |  to the directory that contains rt/lib/jfxrt.jar
                 |  or e.g set JAVAFX_HOME to the /Library/Java/JavaVirtualMachines/jdk1.7.0_11.jdk/Contents/Home
                 |  otherwise the current JAVA_HOME will be used
                 |  with the JavaFX version ${scalafx_requiredJavaFxVersion}.\n""".stripMargin()
        System.exit 1
    }

    // Define equivalent Maven GAV coordinates.
    // groupId - This element indicates the unique identifier of the organization or group that created the project.
    // The groupId is one of the key identifiers of a project and is typically based on the
    // fully qualified domain name of your organization
    group = 'org.scalafx'
    // artifactId - This element indicates the unique base name of the primary artifact being generated by this project.
    // The primary artifact for a project is typically a JAR file.
    // (In Gradle, the artifactId is normally taken from the containing directory name)
    // NB: We add the Scala compiler version to the project name in order to simulate a Scala SBT crossVersion build.
    archivesBaseName = "${project.name}_${scalaVersion}"
    // version - This element indicates the version of the artifact generated by the project.
    version = '8.0.0-M1-SNAPSHOT'
       
    ext.isSnapshot = version.endsWith("-SNAPSHOT")
    if (isSnapshot) {
        println("${project.name} - DEBUG: **** This is a Snapshot Build ****")
    }

    task printInfo << {
        println """
            |This is `${project.name}'
            |ext.scalaVersion=${scalaVersion}
            |ext.javafxJar=${javafxJar}
            |group=${project.group},
            |archivesBaseName=${archivesBaseName}, version=${version}""".stripMargin()
    }
    
    jar {
        manifest {
            attributes 'Implementation-Title': 'ScalaFX', 'Implementation-Version': version
        }
    }
    
    repositories {
        mavenCentral()
    }
    
    dependencies {
        scalaTools  "${scalaGroup}:scala-compiler:${scalaVersion}"
        scalaTools  "${scalaGroup}:scala-library:${scalaVersion}"
    
        // Libraries needed for scala api
        compile     "${scalaGroup}:scala-library:${scalaVersion}"
        
        // We need the JavaFX APIs    
        compile     files(ext.javafxJar)
        
        testCompile 'junit:junit:4.10'
        testCompile 'org.hamcrest:hamcrest-core:1.1'
        testCompile 'org.scalatest:scalatest_2.9.1:1.9.1'
    }

    task buildTimestamped(type: Copy, dependsOn: 'build') {
        from 'build/libs'
        into 'build/libs/timestamped'
        include '*.jar'
        rename { String fileName ->
            fileName.replace('SNAPSHOT', "SNAPSHOT-${new Date().format('HH-mm-dd-MM-yyyy')}")
        }
    }
    
    task wrapper(type: Wrapper, description:"create a gradlew") {
        gradleVersion = '1.3'
    }
        
    uploadArchives.onlyIf {
          project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
    }
}

project(':scalafx') {
    printInfo.doLast  {
        println("this is the ScalaFX build")
    }
}

project(':scalafx-demos') {
    printInfo.doLast  {
        println("this is the ScalaFX DEMOS build")
    }
    
    dependencies {
        compile project(":scalafx")
    }

    task(run, dependsOn: 'classes', type: JavaExec,
        description:"Runs the Colorful Circles demo program") {
        main = 'scalafx.ColorfulCircles'
        classpath = sourceSets.main.runtimeClasspath
        args 'one', 'two', 'three'
        systemProperty 'simple.message', 'Hello '
    }

    task(runVideoCubeDemo, dependsOn: 'classes', type: JavaExec,
        description:"Runs the Video 3D Movie Cube demo program") {
        main = 'scalafx.graphics3d.VideoCubeDemo'
        classpath = sourceSets.main.runtimeClasspath
    }
}

// fini
